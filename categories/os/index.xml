<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>OS - 分类 - </title>
        <link>https://blog.silasblog.top/categories/os/</link>
        <description>OS - 分类 - </description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 30 Jul 2022 17:07:17 &#43;0800</lastBuildDate><atom:link href="https://blog.silasblog.top/categories/os/" rel="self" type="application/rss+xml" /><item>
    <title>MIT6S.081-Lab9 File system</title>
    <link>https://blog.silasblog.top/mit6s.081-lab9-file-system/</link>
    <pubDate>Sat, 30 Jul 2022 17:07:17 &#43;0800</pubDate><author>
        <name>Silas</name>
    </author><guid>https://blog.silasblog.top/mit6s.081-lab9-file-system/</guid>
    <description><![CDATA[Large files这个部分是要拓展xv6原来的文件系统，本来的inode是一级的，addrs数组中最后一个元素对应一个间接引用节点的地址，这个节点]]></description>
</item><item>
    <title>MIT6S.081-Lab6: Multithreading</title>
    <link>https://blog.silasblog.top/mit6s.081-lab6-multithreading/</link>
    <pubDate>Sun, 24 Jul 2022 16:08:22 &#43;0800</pubDate><author>
        <name>Silas</name>
    </author><guid>https://blog.silasblog.top/mit6s.081-lab6-multithreading/</guid>
    <description><![CDATA[Uthread: switching between threads这个实验主要是让我们了解线程上下文切换需要做的哪些内容 大部分内容都可以参照内核态的进程进行上下文切换时保存的寄存器 首先在]]></description>
</item><item>
    <title>MIT6S.081-Lab4: traps</title>
    <link>https://blog.silasblog.top/mit6s.081-lab4-traps/</link>
    <pubDate>Wed, 20 Jul 2022 13:41:54 &#43;0800</pubDate><author>
        <name>Silas</name>
    </author><guid>https://blog.silasblog.top/mit6s.081-lab4-traps/</guid>
    <description><![CDATA[RISC-V assembly 哪些寄存器保存函数的参数？例如，在main对printf的调用中，哪个寄存器保存13？ a0-a7 中存放参数，a2 保存了 13 main的汇编代码中对函]]></description>
</item><item>
    <title>MIT6S.081-Lab3: page tables</title>
    <link>https://blog.silasblog.top/mit6s.081-lab3-page-tables/</link>
    <pubDate>Tue, 19 Jul 2022 22:14:30 &#43;0800</pubDate><author>
        <name>Silas</name>
    </author><guid>https://blog.silasblog.top/mit6s.081-lab3-page-tables/</guid>
    <description><![CDATA[Speed up system calls最开始参考实验部分的是课程介绍 · 6.S081 All-In-One，做完打印页表实验后发现没法通过，然后反应过来这个中文翻译是基于xv6]]></description>
</item><item>
    <title>MIT6S.081-Lab2: system calls</title>
    <link>https://blog.silasblog.top/mit6s.081-lab2-system-calls/</link>
    <pubDate>Mon, 18 Jul 2022 12:45:07 &#43;0800</pubDate><author>
        <name>Silas</name>
    </author><guid>https://blog.silasblog.top/mit6s.081-lab2-system-calls/</guid>
    <description><![CDATA[System call tracingtrace 的功能就是根据提供的掩码 mask，来跟踪后续执行的系统调用情况，用户级的 trace 将传入的一个数字通过内核态的系统调用 sys_trace 来设置进程的掩码 mas]]></description>
</item><item>
    <title>MIT6S.081-lab1:Xv6 and Unix utilities</title>
    <link>https://blog.silasblog.top/mit6s.081-lab1xv6-and-unix-utilities/</link>
    <pubDate>Sun, 17 Jul 2022 19:27:07 &#43;0800</pubDate><author>
        <name>Silas</name>
    </author><guid>https://blog.silasblog.top/mit6s.081-lab1xv6-and-unix-utilities/</guid>
    <description><![CDATA[sleep比较容易，主要是看系统调用的掌握，注意main函数传入的参数如何处理 1 2 3 4 5 6 7 8 9 10 11 12 #include &#34;kernel/types.h&#34;#include &#34;kernel/stat.h&#34;#include &#34;user/user.h&#34; int main(int argc, char *argv[]) { if (argc != 2) { printf(&#34;Usage: sleep time\n&#34;); exit(1);]]></description>
</item></channel>
</rss>
